# handlers.py
import logging
import os
import re
from moviepy.editor import VideoFileClip
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import BadRequest, TimedOut
from telegram.ext import CallbackContext
from telegram.constants import ChatAction, ParseMode

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MAX_DURATION_SECONDS = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä—É–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_FILE_SIZE_BYTES = 12 * 1024 * 1024 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∫—Ä—É–∂–∫–∞ (12 MB)
CIRCLE_SIZE = 360 # –†–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞
INPUT_FILENAME_TPL = "input_media_{}.tmp" # –®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
OUTPUT_FILENAME_TPL = "output_video_{}.mp4" # –®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_temp_filenames(user_id: int) -> tuple[str, str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return INPUT_FILENAME_TPL.format(user_id), OUTPUT_FILENAME_TPL.format(user_id)

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def cleanup_files(*filenames):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    for filename in filenames:
        if filename and os.path.exists(filename):
            try:
                os.remove(filename)
                logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filename} —É–¥–∞–ª–µ–Ω.")
            except OSError as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filename}: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
async def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start."""
    user = update.effective_user
    user_name = escape_markdown_v2(user.first_name) if user and user.first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º MarkdownV2
    start_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}\\! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ GIF –≤ –∫–ª–∞—Å—Å–Ω—ã–π Telegram\\-–∫—Ä—É–∂–æ–∫\\.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ GIF\\-–∞–Ω–∏–º–∞—Ü–∏—é, –∏ —è —Å–¥–µ–ª–∞—é –º–∞–≥–∏—é\\! ‚ú®\n\n"
        "üìå **–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
        "‚ñ™Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –í–∏–¥–µ–æ/GIF –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥ \\(–µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ, —è –ø—Ä–µ–¥–ª–æ–∂—É –æ–±—Ä–µ–∑–∞—Ç—å\\)\\.\n"
        "‚ñ™Ô∏è **–ó–≤—É–∫:** –Ø —Å–ø—Ä–æ—à—É, –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–≤—É–∫\\.\n"
        "‚ñ™Ô∏è **–§–æ—Ä–º–∞—Ç:** –Ø –ø—Ä–∏–Ω–∏–º–∞—é –º–µ–¥–∏–∞ —Å –ª—é–±—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∂—É –µ–≥–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞\\.\n"
        "‚ñ™Ô∏è **–°–æ–≤–µ—Ç:** –î–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ \\(1:1\\)\\."
    )

    await update.message.reply_text(start_message, parse_mode=ParseMode.MARKDOWN_V2)

async def process_media(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ/GIF: —Å–∫–∞—á–∏–≤–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ü–∏–∏."""
    message = update.message
    user_id = message.from_user.id
    chat_id = message.chat_id
    media_file_id = None
    file_unique_id = None
    media_type = ""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    if message.video:
        media_file_id = message.video.file_id
        file_unique_id = message.video.file_unique_id
        media_type = 'video'
        logging.info(f"User {user_id}: –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ (ID: {media_file_id}, UniqueID: {file_unique_id})")
    elif message.animation:
        media_file_id = message.animation.file_id
        file_unique_id = message.animation.file_unique_id
        media_type = 'animation'
        logging.info(f"User {user_id}: –ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è (ID: {media_file_id}, UniqueID: {file_unique_id})")
    else:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ GIF-–∞–Ω–∏–º–∞—Ü–∏—é.", parse_mode=None)
        return

    input_filename, output_filename = get_temp_filenames(user_id)
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await cleanup_files(input_filename, output_filename)

    status_message = await message.reply_text("–°–∫–∞—á–∏–≤–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ–¥–∏–∞...", parse_mode=None)
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    input_clip = None
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        try:
            media_file = await context.bot.get_file(media_file_id)
            await media_file.download_to_drive(input_filename)
            logging.info(f"User {user_id}: –ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω –≤ {input_filename}")
        except BadRequest as e:
            logging.error(f"User {user_id}: –û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_unique_id}: {e}")
            await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.", parse_mode=None)
            return
        except Exception as e:
            logging.error(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_unique_id}: {e}", exc_info=True)
            await status_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.", parse_mode=None)
            return

        # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é MoviePy
        await status_message.edit_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...", parse_mode=None)
        input_clip = VideoFileClip(input_filename)
        actual_duration = input_clip.duration

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if actual_duration is None or actual_duration <= 0:
             logging.warning(f"User {user_id}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è {input_filename}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
             await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.", parse_mode=None)
             await cleanup_files(input_filename)
             if input_clip: input_clip.close()
             return

        logging.info(f"User {user_id}: –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {input_filename}: {actual_duration:.2f} —Å–µ–∫.")

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Inline –∫–Ω–æ–ø–∫–∏
        needs_trim = actual_duration > MAX_DURATION_SECONDS
        duration_text = f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {actual_duration:.1f} —Å–µ–∫."
        options_text_base = f"{duration_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:"
        if needs_trim:
             options_text_base = f"{duration_text} (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!)\n\n–û–±—Ä–µ–∑–∞—Ç—å –¥–æ {MAX_DURATION_SECONDS} —Å–µ–∫ –∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏–∏:"

        options_text_esc = escape_markdown_v2(options_text_base) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è MarkdownV2

        keyboard_buttons = []
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_unique_id –¥–ª—è —Å–≤—è–∑–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ñ–∞–π–ª–æ–º
        base_data = f"{file_unique_id.replace(':', '_')}"

        if not needs_trim:
            # –ö–Ω–æ–ø–∫–∏ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
            keyboard_buttons.append([
                InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data=f"process:keep_audio:no_trim:{base_data}"),
                InlineKeyboardButton("üîá –£–±—Ä–∞—Ç—å –∑–≤—É–∫", callback_data=f"process:mute_audio:no_trim:{base_data}"),
            ])
        else:
            # –ö–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–±—Ä–µ–∑–∫–∏
             keyboard_buttons.append([
                 InlineKeyboardButton("‚úÇÔ∏è+‚úÖ –û–±—Ä–µ–∑–∞—Ç—å –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data=f"process:keep_audio:trim:{base_data}"),
                 InlineKeyboardButton("‚úÇÔ∏è+üîá –û–±—Ä–µ–∑–∞—Ç—å –∏ —É–±—Ä–∞—Ç—å –∑–≤—É–∫", callback_data=f"process:mute_audio:trim:{base_data}"),
             ])

        keyboard_buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel:na:na:{base_data}")])
        reply_markup = InlineKeyboardMarkup(keyboard_buttons)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
        context.user_data[f"media_{file_unique_id}"] = {
            'input_filename': input_filename,
            'media_type': media_type,
            'chat_id': chat_id,
            'status_message_id': status_message.message_id
        }
        logging.info(f"User {user_id}: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {file_unique_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ä–∞–∑–º–µ—Ç–∫–æ–π MarkdownV2
        await status_message.edit_text(options_text_esc, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        logging.error(f"User {user_id}: –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ({file_unique_id}): {e}", exc_info=True)
        try:
            await status_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode=None)
        except Exception as edit_err:
            logging.warning(f"User {user_id}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {edit_err}")
        await cleanup_files(input_filename) # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø MoviePy, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
         if input_clip:
             try:
                 input_clip.close()
             except Exception as close_err:
                 logging.error(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ input_clip –≤ process_media: {close_err}")


async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π."""
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –¥–ª—è —Å–Ω—è—Ç–∏—è "—á–∞—Å–∏–∫–æ–≤"

    user_id = query.from_user.id
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: action:audio_choice:trim_choice:file_unique_id)
        data_parts = query.data.split(':')
        action = data_parts[0]
        file_unique_id = data_parts[-1] if len(data_parts) > 1 else None
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ':' –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ base_data
        file_unique_id = file_unique_id.replace('_', ':') if file_unique_id else None

    except Exception as e:
        logging.error(f"User {user_id}: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data '{query.data}': {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", parse_mode=None)
        return

    if not file_unique_id:
        logging.warning(f"User {user_id}: –ü–æ–ª—É—á–µ–Ω callback –±–µ–∑ file_unique_id: {query.data}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–µ—Ç ID —Ñ–∞–π–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –∑–∞–Ω–æ–≤–æ.", parse_mode=None)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ
    user_key = f"media_{file_unique_id}"
    media_data = context.user_data.pop(user_key, None) # pop —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–≥–ª–∏ —É—Å—Ç–∞—Ä–µ—Ç—å –∏–ª–∏ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã)
    if not media_data:
        logging.warning(f"User {user_id}: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {file_unique_id} –≤ user_data (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª–∏).")
        await query.edit_message_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Ñ–∞–π–ª–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –∑–∞–Ω–æ–≤–æ.", parse_mode=None)
        input_filename, _ = get_temp_filenames(user_id)
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
        await cleanup_files(input_filename)
        return

    input_filename = media_data.get('input_filename')
    chat_id = media_data.get('chat_id')
    status_message_id = media_data.get('status_message_id')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
    if action == 'cancel':
        logging.info(f"User {user_id}: –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {file_unique_id}.")
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode=None)
        await cleanup_files(input_filename)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "process"
    if action == 'process':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ callback_data
        if len(data_parts) < 4:
             logging.error(f"User {user_id}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è process: {query.data}")
             await query.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode=None)
             await cleanup_files(input_filename)
             return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        audio_choice = data_parts[1] # 'keep_audio' or 'mute_audio'
        trim_choice = data_parts[2] # 'no_trim' or 'trim'
        mute = (audio_choice == 'mute_audio')
        trim = (trim_choice == 'trim')

        logging.info(f"User {user_id}: –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É {file_unique_id}. –û–±—Ä–µ–∑–∫–∞: {trim}, –ó–≤—É–∫: {'—É–±—Ä–∞—Ç—å' if mute else '–æ—Å—Ç–∞–≤–∏—Ç—å'}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = f"–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é {'—Å –æ–±—Ä–µ–∑–∫–æ–π' if trim else ''} {'–∏ –±–µ–∑ –∑–≤—É–∫–∞' if mute else ''}..."
        try:
            await query.edit_message_text(status_text, parse_mode=None)
        except BadRequest as e: # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
             logging.warning(f"User {user_id}: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–∫—Å—Ç —Ç–æ—Ç –∂–µ): {e}")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.RECORD_VIDEO_NOTE)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        await _perform_conversion(input_filename, mute, trim, update, context, file_unique_id, chat_id, status_message_id)

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        logging.warning(f"User {user_id}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ callback: {action}")
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", parse_mode=None)
        await cleanup_files(input_filename)


async def _perform_conversion(input_filename: str, mute: bool, trim: bool, update: Update, context: CallbackContext, file_unique_id: str, chat_id: int, status_message_id: int):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ."""
    user_id = update.effective_user.id if update.effective_user else "unknown_user"
    _, output_filename = get_temp_filenames(user_id)
    input_clip = None
    output_clip = None
    final_duration = 0

    async def edit_status(text: str, use_markdown: bool = False):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."""
        if chat_id and status_message_id:
            mode = ParseMode.MARKDOWN_V2 if use_markdown else None
            processed_text = escape_markdown_v2(text) if use_markdown else text
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id, message_id=status_message_id,
                    text=processed_text, parse_mode=mode
                )
            except BadRequest as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified"
                if "Message is not modified" not in str(e):
                    logging.warning(f"User {user_id}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({status_message_id}) –¥–æ '{text}': {e}")
            except Exception as e:
                 logging.warning(f"User {user_id}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({status_message_id}) –¥–æ '{text}': {e}")

    try:
        await edit_status("–ó–∞–≥—Ä—É–∂–∞—é –º–µ–¥–∏–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        input_clip = VideoFileClip(input_filename)

        # 1. –û–±—Ä–µ–∑–∫–∞ –¥–æ MAX_DURATION_SECONDS (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ)
        if trim:
            await edit_status("–û–±—Ä–µ–∑–∞—é –≤–∏–¥–µ–æ...")
            logging.info(f"User {user_id}: –û–±—Ä–µ–∑–∫–∞ {file_unique_id} –¥–æ {MAX_DURATION_SECONDS} —Å–µ–∫.")
            duration_to_trim = min(input_clip.duration, MAX_DURATION_SECONDS)
            current_clip = input_clip.subclip(0, duration_to_trim)
        else:
            current_clip = input_clip

        # 2. –£–¥–∞–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç)
        if mute:
            await edit_status("–£–¥–∞–ª—è—é –∑–≤—É–∫...")
            logging.info(f"User {user_id}: –£–¥–∞–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∏–∑ {file_unique_id}.")
            current_clip = current_clip.without_audio()
        elif current_clip.audio is None:
             # –ï—Å–ª–∏ –∑–≤—É–∫–∞ –Ω–µ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, GIF), —Å—á–∏—Ç–∞–µ–º —á—Ç–æ mute=True –¥–ª—è –∫–æ–¥–µ–∫–æ–≤
             mute = True

        # 3. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –æ–±—Ä–µ–∑–∫–∞ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
        await edit_status("–ò–∑–º–µ–Ω—è—é —Ä–∞–∑–º–µ—Ä –∏ –æ–±—Ä–µ–∑–∞—é –∫–∞–¥—Ä...")
        w, h = current_clip.size
        target_size = CIRCLE_SIZE
        # –†–µ—Å–∞–π–∑ –ø–æ –º–µ–Ω—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –¥–æ target_size
        if w > h:
            resized_clip = current_clip.resize(height=target_size)
        elif h > w:
            resized_clip = current_clip.resize(width=target_size)
        else: # –£–∂–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ
            resized_clip = current_clip.resize(width=target_size)

        # –û–±—Ä–µ–∑–∫–∞ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ target_size x target_size
        output_clip = resized_clip.crop(x_center=resized_clip.w / 2,
                                        y_center=resized_clip.h / 2,
                                        width=target_size,
                                        height=target_size)
        final_duration = int(output_clip.duration) if output_clip.duration else 0
        logging.info(f"User {user_id}: –†–µ—Å–∞–π–∑/–∫—Ä–æ–ø {file_unique_id} –¥–æ {target_size}x{target_size}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {final_duration} —Å–µ–∫.")

        # 4. –ó–∞–ø–∏—Å—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ MP4
        await edit_status("–°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ...")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.RECORD_VIDEO_NOTE)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        output_clip.write_videofile(
            output_filename,
            codec="libx264",
            # –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ–∫–æ–¥–µ–∫/–±–∏—Ç—Ä–µ–π—Ç –µ—Å–ª–∏ –∑–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç
            audio_codec="aac" if not mute and output_clip.audio is not None else None,
            bitrate="800k", # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            audio_bitrate="96k" if not mute and output_clip.audio is not None else None,
            preset='medium', # –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
            threads=os.cpu_count() or 4, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–¥—Ä–∞ CPU
            logger=None, # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–µ—Ä MoviePy –≤ –∫–æ–Ω—Å–æ–ª–∏
            ffmpeg_params=[ # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ffmpeg –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "-profile:v", "baseline", "-level", "3.0",
                "-pix_fmt", "yuv420p", "-movflags", "+faststart"
            ]
        )
        logging.info(f"User {user_id}: –§–∞–π–ª {output_filename} –¥–ª—è {file_unique_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        final_size = os.path.getsize(output_filename)
        if final_size > MAX_FILE_SIZE_BYTES:
            logging.warning(f"User {user_id}: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {output_filename} ({file_unique_id}) —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {final_size} –±–∞–π—Ç.")
            await edit_status(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ({final_size // 1024 // 1024} –ú–ë). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –ø–æ–∫–æ—Ä–æ—á–µ.")
            return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        # 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞
        await edit_status("–ó–∞–≥—Ä—É–∂–∞—é –∫—Ä—É–∂–æ–∫ –≤ Telegram...")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_VIDEO_NOTE)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫
            with open(output_filename, "rb") as video_note_file:
                await context.bot.send_video_note(
                    chat_id=chat_id, video_note=video_note_file,
                    duration=final_duration, length=target_size
                )
            logging.info(f"User {user_id}: –í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ {file_unique_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=status_message_id)
            except Exception as del_err:
                 logging.warning(f"User {user_id}: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {status_message_id}: {del_err}")

        except TimedOut as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
            logging.error(f"User {user_id}: TimedOut –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ {file_unique_id}: {e}")
            await edit_status("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í–∏–¥–µ–æ –º–æ–≥–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç!", use_markdown=False)
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã finally –æ—á–∏—Å—Ç–∏–ª —Ñ–∞–π–ª—ã

        except Exception as send_err:
             # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
             logging.error(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ {file_unique_id}: {send_err}", exc_info=True)
             await edit_status("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—Ä—É–∂–∫–∞ –≤ Telegram.", use_markdown=False)
             # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã finally –æ—á–∏—Å—Ç–∏–ª —Ñ–∞–π–ª—ã

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        logging.error(f"User {user_id}: –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏ {file_unique_id}: {e}", exc_info=True)
        await edit_status("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.", use_markdown=False)

    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–ø–æ–≤ MoviePy
        if input_clip:
            try: input_clip.close()
            except Exception as e: logging.error(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ input_clip –≤ conversion: {e}")
        if output_clip:
             try: output_clip.close()
             except Exception as e: logging.error(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ output_clip –≤ conversion: {e}")
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await cleanup_files(input_filename, output_filename)

